AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Stage:
    Type: "String"
    AllowedValues:
      - dev
      - prod
  Subnet:
    Type: "String"
    NoEcho: true
  VPC:
    Type: "String"
    NoEcho: true
  DesiredCapacity:
    Type: "Number"
    Default: 1
  LatestECSOptimizedAMI:
    Description: AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id

Resources:
  SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: String
        GroupName: !Sub "${Stage}_staking_sg"
        SecurityGroupEgress: 
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
        SecurityGroupIngress: 
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
        VpcId: !Ref VPC
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${Stage}-staking-cluster"
      # No capacity providers necessary for EC2
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      # ECS Execute logging is defined in Config
      # CONFIGURE LOGGING HERE
  ECSService:
      Type: AWS::ECS::Service
      DependsOn: 
        - ECSCluster
        - SecurityGroup
      Properties:
        Cluster: !Sub "${Stage}-staking-cluster"
        DeploymentConfiguration: 
          DeploymentCircuitBreaker:
            Enable: false
            Rollback: true
          MaximumPercent: 200
          MinimumHealthyPercent: 100
        DeploymentController: 
          Type: ECS
        DesiredCount: !Ref DesiredCapacity
        EnableECSManagedTags: true
        # EnableExecuteCommand: true
        # https://github.com/aws/aws-cli/issues/6242
        LaunchType: EC2
        NetworkConfiguration: 
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            SecurityGroups: 
              - !GetAtt SecurityGroup.GroupId
            Subnets: 
              - !Ref Subnet
        PlacementStrategies: 
          - Type: spread
            Field: attribute:ecs.availability-zone
          - Type: spread
            Field: instanceId
        SchedulingStrategy: REPLICA
        ServiceName: !Sub "${Stage}_staking_service"
        TaskDefinition: !Sub "${Stage}_eth_staker"
  AutoScalingGroup:
    DependsOn: 
      - ECSCluster
      - LaunchTemplate
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "ECS_${Stage}_staking_ASG"
      AvailabilityZones: 
        - !Sub "${AWS::Region}d"
      CapacityRebalance: true
      DesiredCapacity: !Sub "${DesiredCapacity}"
      LaunchTemplate: 
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: 2
      MetricsCollection: 
        - Granularity: 1Minute
      MinSize: 0
      NewInstancesProtectedFromScaleIn: false
      Tags: 
        -
          Key: Name
          Value: !Sub "ECS Instance - ${AWS::StackName}"
          PropagateAtLaunch: true
        -
          Key: Description
          Value: "This instance is the part of the Auto Scaling group which was created through Cloudformation"
          PropagateAtLaunch: true
      TerminationPolicies: 
        - Default
      VPCZoneIdentifier: 
        - !Ref Subnet
  LaunchTemplate:
    DependsOn: SecurityGroup  
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateData: 
        BlockDeviceMappings:
          - 
            DeviceName: /dev/sdx
            Ebs: 
              DeleteOnTermination: true
              VolumeSize: 500
              # can't use io2 because of cost
              VolumeType: gp3
              # Iops: 10000
              # 10 - 15k is laptop/desktop SSD throughput
              # Throughput: 1000
        DisableApiStop: false
        DisableApiTermination: false
        EbsOptimized: true
        IamInstanceProfile: 
          Name: ecsInstanceRole
        # This is Amazon Linux 2023 AMI for amd64
        ImageId: !Ref LatestECSOptimizedAMI
        InstanceInitiatedShutdownBehavior: terminate
        # for spot instances
        # InstanceMarketOptions: 
        #   InstanceMarketOptions
        # # use this to specify reqs instead of instance type
        # InstanceRequirements: 
        #   InstanceRequirements
        InstanceType: t3.large
        KeyName: !Sub "${Stage}_staking_keys"
        MaintenanceOptions: 
          AutoRecovery: default
        Monitoring: 
          Enabled: true
        SecurityGroupIds: 
          - !GetAtt SecurityGroup.GroupId
        TagSpecifications: 
          - ResourceType: volume
            Tags:
              -
                Key: Name
                Value: !Sub "ECS Instance - ${AWS::StackName}"
              -
                Key: Description
                Value: "This volume is the part of the Launch Template which was created through Cloudformation"
          - ResourceType: instance
            Tags:
              -
                Key: Name
                Value: !Sub "ECS Instance - ${AWS::StackName}"
              -
                Key: Description
                Value: "This instance is the part of the Launch Template which was created through Cloudformation"
        UserData:
          "Fn::Base64": !Sub |
            #!/bin/bash
            echo ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config
            yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
            yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
            yum install -y aws-cfn-bootstrap hibagent 
            /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchTemplate
            /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
            /usr/bin/enable-ec2-spot-hibernation
      LaunchTemplateName: !Sub "${Stage}_launch_template"

# use this to get asg connected to ECS cluster
# https://stackoverflow.com/questions/35202993/how-can-i-connect-my-autoscaling-group-to-my-ecs-cluster#:~:text=You%20need%20to%20create%20a%20new%20capacity%20provider%20for%20the,group%20under%20Auto%20Scaling%20group%20.