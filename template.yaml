AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Stage:
    Type: "String"
    AllowedValues:
      - dev
      - prod
  Subnet:
    Type: "String"
    NoEcho: true
  VPC:
    Type: "String"
    NoEcho: true

Resources:
  SecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: String
        GroupName: !Sub "${Stage}_staking_sg"
        SecurityGroupEgress: 
          - CidrIp: 0.0.0.0/0
            IpProtocol: -1
            # DestinationPrefixListId: String
            # DestinationSecurityGroupId: String
            # FromPort: Integer
            # ToPort: Integer
        SecurityGroupIngress: 
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            # SourcePrefixListId: String
            # SourceSecurityGroupId: String
            # SourceSecurityGroupName: String
            # SourceSecurityGroupOwnerId: String
          - CidrIp: 0.0.0.0/0
            IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            # SourcePrefixListId: String
            # SourceSecurityGroupId: String
            # SourceSecurityGroupName: String
            # SourceSecurityGroupOwnerId: String
        VpcId: !Ref VPC
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${Stage}2-staking-cluster"
      # No capacity providers necessary for EC2
      ClusterSettings:
        - Name: containerInsights
          Value: enabled
      # CONFIGURE LOGGING HERE
  ECSService:
      Type: AWS::ECS::Service
      DependsOn: 
        - ECSCluster
        - SecurityGroup
      Properties:
        Cluster: !Sub "${Stage}2-staking-cluster"
        DeploymentConfiguration: 
          DeploymentCircuitBreaker:
            Enable: false
            Rollback: true
          MaximumPercent: 200
          MinimumHealthyPercent: 100
        DeploymentController: 
          Type: ECS
        # Change this to 1 after ASG and Launch Template/Config
        DesiredCount: 0
        EnableECSManagedTags: true
        # EnableExecuteCommand: true
        # https://github.com/aws/aws-cli/issues/6242
        LaunchType: EC2
        NetworkConfiguration: 
          AwsvpcConfiguration:
            AssignPublicIp: DISABLED
            SecurityGroups: 
              - !GetAtt SecurityGroup.GroupId
            Subnets: 
              - !Ref Subnet
        PlacementStrategies: 
          - Type: spread
            Field: attribute:ecs.availability-zone
          - Type: spread
            Field: instanceId
        SchedulingStrategy: REPLICA
        ServiceName: !Sub "${Stage}2_staking_service"
        TaskDefinition: !Sub "${Stage}_eth_staker"
  AutoScalingGroup:
  # FIGURE OUT HOW TO LINK THIS TO SERVICE OR CLUSTER
    DependsOn: 
      - ECSCluster
      - LaunchTemplate
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: !Sub "ECS_${Stage}_staking_ASG"
      AvailabilityZones: 
        - !Sub "${AWS::Region}d"
      CapacityRebalance: true
      DesiredCapacity: 0
      LaunchTemplate: 
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MaxSize: 2
      MetricsCollection: 
        - Granularity: 1Minute
      MinSize: 0
      NewInstancesProtectedFromScaleIn: false
      Tags: 
        -
          Key: Name
          Value: !Sub "ECS Instance - ${AWS::StackName}"
          PropagateAtLaunch: true
        -
          Key: Description
          Value: "This instance is the part of the Auto Scaling group which was created through Cloudformation"
          PropagateAtLaunch: true
        # Verify that cloudformation creates these automatically and remove
        # -
        #   Key: aws:cloudformation:logical-id
        #   Value: !Ref AutoScalingGroup
        #   PropagateAtLaunch: true
        # -
        #   Key: aws:cloudformation:stack-id
        #   Value: !Ref AWS::StackId
        #   PropagateAtLaunch: true
        
        # -
        #   Key: aws:cloudformation:stack-name
        #   Value: !Ref AWS::StackName
        #   PropagateAtLaunch: true
      TerminationPolicies: 
        - Default
      VPCZoneIdentifier: 
        - !Ref Subnet
  # TRY DOING LAUNCH TEMPLATE INSTEAD
    # ECSLaunchConfiguration:
    # Type: AWS::AutoScaling::LaunchConfiguration
    # Properties:
    #   IamInstanceProfile: !Ref ECSInstanceProfile
    #   UserData:
    #     "Fn::Base64": !Sub |
    #       #!/bin/bash
    #       yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
    #       yum install -y https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm
    #       yum install -y aws-cfn-bootstrap hibagent 
    #       /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSLaunchConfiguration
    #       /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource ECSAutoScalingGroup
    #       /usr/bin/enable-ec2-spot-hibernation
  LaunchTemplate:
    DependsOn: SecurityGroup  
    Type: AWS::EC2::LaunchTemplate
    Properties: 
      LaunchTemplateData: 
        BlockDeviceMappings: 
          - BlockDeviceMapping
        DisableApiStop: false
        DisableApiTermination: false
        EbsOptimized: true
        IamInstanceProfile: 
          Name: ecsInstanceRole
        # This is Amazon Linux 2023 AMI for amd64
        ImageId: resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64
        InstanceInitiatedShutdownBehavior: terminate
        # for spot instances
        # InstanceMarketOptions: 
        #   InstanceMarketOptions
        # # use this to specify reqs instead of instance type
        # InstanceRequirements: 
        #   InstanceRequirements
        InstanceType: t3.large
        KeyName: !Sub "${Stage}_staking_keys"
        # MaintenanceOptions: 
        #   AutoRecovery:
        Monitoring: 
          Enabled: true
        SecurityGroupIds: 
          - !GetAtt SecurityGroup.GroupId
        TagSpecifications: 
          - ResourceType: volume
            Tags:
              -
                Key: Name
                Value: !Sub "ECS Instance - ${AWS::StackName}"
                PropagateAtLaunch: true
              -
                Key: Description
                Value: "This volume is the part of the Launch Template which was created through Cloudformation"
                PropagateAtLaunch: true
          - ResourceType: instance
            Tags:
              -
                Key: Name
                Value: !Sub "ECS Instance - ${AWS::StackName}"
                PropagateAtLaunch: true
              -
                Key: Description
                Value: "This instance is the part of the Launch Template which was created through Cloudformation"
                PropagateAtLaunch: true
        UserData: String
      LaunchTemplateName: !Sub "${Stage}_launch_template"

      # 28/30 options completed

          # need io2 500 gb ssd ebs vol attached to ec2 instance
          # verify ebs optimization is enabled
