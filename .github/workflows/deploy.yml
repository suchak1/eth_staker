name: Deploy ECS

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      Stage: ${{ fromJSON('["dev", "prod"]')[github.ref_name == 'master'] }}
      ARCH: arm64
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ env.ARCH }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        # look into using this action: https://github.com/marketplace/actions/docker-build-push-action
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ fromJSON('["dev_eth_staker", "prod_eth_staker"]')[github.ref_name == 'master'] }}
          DEPLOY_ENV: ${{ fromJSON('["dev", "prod"]')[github.ref_name == 'master'] }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker buildx \
            --platform linux/$ARCH \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest \
            --build-arg DEPLOY_ENV=${DEPLOY_ENV} \
            --build-arg VERSION=${IMAGE_TAG} \
            --build-arg ARCH=${ARCH} \
            .
          docker push -a $ECR_REGISTRY/$ECR_REPOSITORY
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Create parameters.env
        env:
          Subnet: ${{ secrets.SUBNET }}
          VPC: ${{ secrets.VPC }}
        run: |
          if [[ "${Stage}" = "dev" ]]
          then
              ParamsFile=dev-parameters.env
          else
              ParamsFile=parameters.env
          fi
          echo "
          Stage=${Stage}
          Subnet=${Subnet}
          VPC=${VPC}
          Arch=${ARCH}
          " >> "${ParamsFile}"

      - name: Update ECS stack
        run: scripts/deploy_stack.sh