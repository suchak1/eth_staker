name: Deploy ECS

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]

  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DEPLOY_ENV: ${{ fromJSON('["dev", "prod"]')[github.ref_name == 'master'] }}
      ARCH: arm64
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ env.ARCH }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Generate Prometheus config
        env:
          GRAF_USER: ${{ secrets.GRAF_USER }}
          GRAF_PASS: ${{ secrets.GRAF_PASS }}
        run: scripts/append_prometheus.sh

      - name: Build and push
        uses: docker/build-push-action@v4
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ fromJSON('["dev_eth_staker", "prod_eth_staker"]')[github.ref_name == 'master'] }}
          IMAGE_TAG: ${{ github.sha }}
        with:
          context: .
          platforms: linux/${{ env.ARCH }}
          push: true
          build-args: |
            DEPLOY_ENV=${{ env.DEPLOY_ENV }}
            VERSION=${{ env.IMAGE_TAG }}
            ARCH=${{ env.ARCH }}
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

      - name: Create parameters.env
        env:
          Subnet: ${{ secrets.SUBNET }}
          VPC: ${{ secrets.VPC }}
          SSHPort: ${{ secrets.SSH_PORT }}
        run: |
          if [[ "${DEPLOY_ENV}" = "dev" ]]
          then
              ParamsFile=dev-parameters.env
          else
              ParamsFile=parameters.env
          fi
          echo "
          DeployEnv=${DEPLOY_ENV}
          Subnet=${Subnet}
          VPC=${VPC}
          Arch=${ARCH}
          SSHPort=${SSHPort}
          " >> "${ParamsFile}"

      - name: Update ECS stack
        run: scripts/deploy_stack.sh